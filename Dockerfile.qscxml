FROM debian:testing

LABEL maintainer="daniele.domenichelli@iit.it"

ENV DEBIAN_FRONTEND=noninteractive

# Install libqt5scxml5-private-dev, qt5remoteobjects, KDStateMachineEditor, and
# GammaRay from pre-built .deb
COPY deb/*.deb /tmp/
RUN echo "deb-src http://deb.debian.org/debian/ testing main" >> /etc/apt/sources.list && \
    apt-get update -qq && \
    apt-get dist-upgrade --autoremove --purge -qq -y && \
    apt-get install -y \
        libqt5scxml5-dev \
        libqt5scxml5-bin \
        build-essential \
        git \
        cmake \
        qtbase5-private-dev \
        qtdeclarative5-dev \
        qtdeclarative5-dev-tools \
        qtdeclarative5-private-dev \
        libqt5xmlpatterns5-dev \
        qt3d-assimpsceneimport-plugin \
        qt3d-defaultgeometryloader-plugin \
        qt3d-gltfsceneio-plugin \
        qt3d-scene2d-plugin \
        qt3d5-dev \
        qtconnectivity5-dev \
        qtlocation5-dev \
        qtpositioning5-dev \
        qtscript5-dev \
        qttools5-dev \
        qttools5-dev-tools \
        qttranslations5-l10n \
        qtwayland5 \
        qtwebengine5-dev \
        libqt5remoteobjects5-dev \
        libqt5remoteobjects5-bin \
        qml-module-qt3d \
        qml-module-qtquick2 \
        qml-module-qtquick-scene3d \
        qml-module-qtquick-window2 \
        qml-module-qtmultimedia \
        qml-module-qtquick-dialogs \
        qml-module-qtquick-controls \
        libgraphviz-dev \
        bison \
        gdb \
        glslang-tools \
        libkf5coreaddons-dev \
        libkf5syntaxhighlighting-dev \
        libproj-dev \
        libqt5svg5-dev \
        libqt5waylandcompositor5-dev \
        libwayland-dev \
        xauth \
        xvfb \
        libace-dev \
        libeigen3-dev \
        qtbase5-dev \
        qtmultimedia5-dev \
        libopencv-dev \
        libedit-dev \
        swig \
        libjpeg-dev \
        libpng-dev \
        libsdl-dev \
        portaudio19-dev \
        libopenni2-dev \
        liblua5.3-dev \
        libpython3-dev \
        libglfw3-dev \
        libglew-dev \
        libftdi-dev \
        libgstreamer1.0-dev \
        libgstreamer-plugins-base1.0-dev \
        gstreamer1.0-plugins-base \
        gstreamer1.0-plugins-good \
        gstreamer1.0-plugins-bad \
        gstreamer1.0-libav \
        gstreamer1.0-tools \
        flex \
        libi2c-dev \
        libv4l-dev \
        libfuse-dev \
        libavcodec-dev \
        libavdevice-dev \
        libavfilter-dev \
        libavformat-dev \
        libavresample-dev \
        libavutil-dev \
        libpostproc-dev \
        libswresample-dev \
        libswscale-dev \
        libgraphviz-dev \
        bash-completion \
        ccache \
        mesa-utils \
        iproute2 \
        net-tools \
        vim \
        libczmq-dev \
        libgtest-dev \
        sudo \
        locate \
        openssl && \
    dpkg -i /tmp/*.deb && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ARG username
RUN groupadd --system --gid 1000 scope; \
    useradd --system --home-dir /home/$username --create-home --shell /bin/bash --uid 1000 --gid 1000 --groups root,sudo $username -p "$(openssl passwd -1 $username)"

ENV CMAKE_COMMON_OPTIONS=" \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DCMAKE_BUILD_TYPE=None \
    -DCMAKE_INSTALL_SYSCONFDIR=/etc \
    -DCMAKE_INSTALL_LOCALSTATEDIR=/var \
    -DCMAKE_EXPORT_NO_PACKAGE_REGISTRY=ON \
    -DCMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY=ON \
    -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=FALSE \
    -DBUILD_SHARED_LIBS=ON"

ARG cmake_parallel=8
ENV CMAKE_BUILD_PARALLEL_LEVEL=${cmake_parallel}

# Build and install YCM
RUN git clone --branch v0.11.0 https://github.com/robotology/YCM.git /usr/local/src/YCM && \
    cmake \
        -H/usr/local/src/YCM \
        -B/usr/local/src/YCM/build \
        ${CMAKE_COMMON_OPTIONS} && \
    cmake --build /usr/local/src/YCM/build && \
    cmake --build /usr/local/src/YCM/build --target install && \
    chown -R $username /usr/local/src/YCM

# Build and install robot-testing-framework
RUN git clone --branch v2.0.0 https://github.com/robotology/robot-testing-framework.git /usr/local/src/robot-testing-framework && \
    cmake \
        -H/usr/local/src/robot-testing-framework \
        -B/usr/local/src/robot-testing-framework/build \
        ${CMAKE_COMMON_OPTIONS} && \
    cmake --build /usr/local/src/robot-testing-framework/build && \
    cmake --build /usr/local/src/robot-testing-framework/build --target install && \
    chown -R $username /usr/local/src/robot-testing-framework

# Build and install YARP
RUN git clone --branch master https://github.com/robotology/YARP.git /usr/local/src/YARP && \
    cmake \
        -H/usr/local/src/YARP \
        -B/usr/local/src/YARP/build \
        ${CMAKE_COMMON_OPTIONS} \
        -DENABLE_yarpmod_depthCamera=ON \
        -DENABLE_yarpmod_fakeDepthCamera=ON \
        -DENABLE_yarpmod_fakebot=ON \
        -DENABLE_yarpmod_fakeMotionControl=ON \
        -DENABLE_yarpmod_fakeAnalogSensor=ON \
        -DENABLE_yarpmod_fakeBattery=ON \
        -DENABLE_yarpmod_fakeIMU=ON \
        -DENABLE_yarpmod_SerialServoBoard=ON \
        -DENABLE_yarpmod_ffmpeg_grabber=ON \
        -DENABLE_yarpmod_ffmpeg_writer=ON \
        -DENABLE_yarpmod_opencv_grabber=ON \
        -DENABLE_yarpmod_serialport=ON \
        -DENABLE_yarpmod_portaudioPlayer=ON \
        -DENABLE_yarpmod_portaudioRecorder=ON \
        -DENABLE_yarpmod_imuBosch_BNO055=ON \
        -DENABLE_yarpmod_dynamixelAX12Ftdi=ON \
        -DENABLE_yarpmod_fakeLaser=ON \
        -DENABLE_yarpmod_fakeMicrophone=ON \
        -DENABLE_yarpmod_fakeSpeaker=ON \
        -DENABLE_yarpmod_laserFromDepth=ON \
        -DENABLE_yarpmod_rpLidar=ON \
        -DENABLE_yarpmod_rpLidar2=ON \
        -DENABLE_yarpmod_laserFromPointCloud=ON \
        -DENABLE_yarpmod_laserFromExternalPort=ON \
        -DENABLE_yarpmod_laserHokuyo=ON \
        -DENABLE_yarpmod_upowerBattery=ON \
        -DENABLE_yarpmod_test_grabber=ON \
        -DENABLE_yarpmod_SDLJoypad=ON \
        -DENABLE_yarpmod_fakeLocalizer=ON \
        -DENABLE_yarpmod_fakeNavigation=ON \
        -DENABLE_yarpmod_portaudio=ON \
        -DENABLE_yarpmod_ServerSoundGrabber=ON \
        -DENABLE_yarpmod_grabber=ON \
        -DENABLE_yarpmod_usbCamera=ON \
        -DENABLE_yarpmod_usbCameraRaw=ON \
        -DENABLE_yarpcar_human=ON \
        -DENABLE_yarpcar_mjpeg=ON \
        -DENABLE_yarpcar_depthimage=ON \
        -DENABLE_yarpcar_h264=ON \
        -DYARP_COMPILE_BINDINGS=ON \
        -DCREATE_LUA=ON \
        -DCREATE_PERL=ON \
        -DCREATE_PYTHON=ON \
        -DYARP_USE_PYTHON_VERSION=3 \
        -DCMAKE_CXX_FLAGS=-D_XOPEN_STREAMS=-1 && \
    cmake --build /usr/local/src/YARP/build && \
    cmake --build /usr/local/src/YARP/build --target install && \
    chown -R $username /usr/local/src/YARP && \
    mkdir -p /home/$username/.config/yarp && \
    mkdir -p /home/$username/.local/share/yarp && \
    chown -R $username /home/$username

# Build and install yarp-unix-socket
RUN git clone --branch master https://github.com/robotology/yarp-unix-socket.git /usr/local/src/yarp-unix-socket && \
    cmake \
        -H/usr/local/src/yarp-unix-socket \
        -B/usr/local/src/yarp-unix-socket/build \
        ${CMAKE_COMMON_OPTIONS} && \
    cmake --build /usr/local/src/yarp-unix-socket/build && \
    cmake --build /usr/local/src/yarp-unix-socket/build --target install && \
    chown -R $username /usr/local/src/yarp-unix-socket

# Build and install BehaviorTree.CPP
RUN git clone --branch master https://github.com/BehaviorTree/BehaviorTree.CPP.git /usr/local/src/BehaviorTree.CPP && \
    ls -la /usr/local/src/BehaviorTree.CPP/src/decorators && \
    cmake \
        -H/usr/local/src/BehaviorTree.CPP \
        -B/usr/local/src/BehaviorTree.CPP/build \
        ${CMAKE_COMMON_OPTIONS} && \
    cmake --build /usr/local/src/BehaviorTree.CPP/build && \
    cmake --build /usr/local/src/BehaviorTree.CPP/build --target install && \
    chown -R $username /usr/local/src/BehaviorTree.CPP

# Build and install Groot
COPY *.patch /tmp/
RUN git clone --branch master https://github.com/BehaviorTree/Groot.git /usr/local/src/Groot && \
    git -C /usr/local/src/Groot config --local user.email "daniele.domenichelli@iit" && \
    git -C /usr/local/src/Groot config --local user.name "Daniele E. Domenichelli" && \
    git -C /usr/local/src/Groot am /tmp/0001-Fix-build-with-BehaviorTree.CPP-library-installed-on.patch && \
    git -C /usr/local/src/Groot am /tmp/0002-Always-build-behavior_tree_editor-as-STATIC.patch && \
    git -C /usr/local/src/Groot am /tmp/0003-Fix-build-with-latest-BT.CPP.patch && \
    git -C /usr/local/src/Groot config --local --remove-section user && \
    cmake \
        -H/usr/local/src/Groot \
        -B/usr/local/src/Groot/build \
        ${CMAKE_COMMON_OPTIONS} && \
    cmake --build /usr/local/src/Groot/build && \
    cmake --build /usr/local/src/Groot/build --target install && \
    chown -R $username /usr/local/src/Groot


RUN update-alternatives --set editor /usr/bin/vim.basic && \
    apt-get update -qq && \
    updatedb && \
    ldconfig

USER $username
WORKDIR /home/$username
